name: deploy
on:
#  pull_request:
#    types:
#      - closed
#    branches: [ "main" ]
  push:
    branches: [ "main" ]
concurrency:
  group: main
  cancel-in-progress: true
jobs:
  verify:
    name: Check Code Quality
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dbelyaev/action-checkstyle@master
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          checkstyle_config: ./checkstyle.xml
          fail_on_error: true
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  tests:
    name: Run Tests
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: verify
    steps:
    - name: checkout repo
      uses: actions/checkout@v4
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: setup Testcontainers Cloud Client
      uses: atomicjar/testcontainers-cloud-setup-action@v1
      with:
        token: ${{ secrets.TC_CLOUD_TOKEN }}
    - name: run the Maven verify phase
      run: mvn verify
  prepare-environment:
    name: Prepare Environment
#    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    needs: tests
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: stop app container
        run: sudo docker-compose -f ./docker/docker-compose.yml down farm-app
  deploy:
    name: Deploy
#    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    needs: prepare-environment
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: run app
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} > ./docker/.env
          echo DATABASE_USER=${{ secrets.DATABASE_USER }} >> ./docker/.env
          echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> ./docker/.env
          sudo docker-compose -f ./docker/docker-compose.yml up -d
          sudo docker system prune -a -f
